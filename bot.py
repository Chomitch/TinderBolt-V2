from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler
import requests

from gpt import *
from util import *

# —Ç—É—Ç –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –Ω–∞—à –∫–æ–¥ :)
async def hello(update, context):
    if dialog.mode=='gpt':
        await gpt_dialog(update, context)
    elif dialog.mode=='date':
        await date_dialog(update, context)
    elif dialog.mode=='message':
        await message_dialog(update, context)
    elif dialog.mode=='profile':
        await profile_dialog(update, context)
    elif dialog.mode=='opener':
        await opener_dialog(update, context)

    else:                
        await send_photo(update, context, "avatar_main")
        await send_text(update, context, f'–ü—Ä–∏–≤–µ—Ç, {update.message.from_user.first_name}!')
        await send_text(update, context, f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: \"{update.message.text}\"")
        await send_text_buttons(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", {  # –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
            "btn_start": " –°—Ç–∞—Ä—Ç ", # –¢–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
            "btn_stop": " –°—Ç–æ–ø "  # –¢–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
        })

async def hello_button(update, context):
    query = update.callback_query.data   #–∫–æ–¥ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.answer() #–ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    await send_html(update, context, f"–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É {query}")

async def start(update, context):
    dialog.mode='main'
    await send_photo(update, context, "main")
    await send_text(update, context, load_message("main"))
    await show_main_menu(update, context, {
        'start':'–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
        'profile':'–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé',
        'opener':'—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
        'message':'–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
        'date':'–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
        'gpt':'–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†',
        'cat':'–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ç–∏–∫–æ–≤'
    })

async def gpt(update, context):
    dialog.mode='gpt'
    await send_photo(update, context, "gpt")
    await send_text(update, context, load_message("gpt"))

async def gpt_dialog(update, context):
    text=update.message.text
    my_message = await send_text(update, context, 'ChatGPT is processing your request...')
    answer = await chatgpt.send_question(load_prompt('gpt'), text)
    await my_message.edit_text(answer)

async def profile(update, context):
    dialog.mode='profile'
    dialog.cnt=0
    dialog.user.clear()
    await send_photo(update, context, "profile")
    await send_text(update, context, load_message("profile"))
    await send_text(update, context, '–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?')

async def profile_dialog(update, context):
    dialog.cnt+=1
    if dialog.cnt==1:
        dialog.user['age']=update.message.text
        await send_text(update, context, '–ö–µ–º –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?')
    elif dialog.cnt==2:
        dialog.user['occupation']=update.message.text
        await send_text(update, context, '–£ –í–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?')
    elif dialog.cnt==3:
        dialog.user['hobby']=update.message.text
        await send_text(update, context, '–ß—Ç–æ –í–∞–º –Ω–µ–Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?')
    elif dialog.cnt==4:
        dialog.user['annoys']=update.message.text
        await send_text(update, context, '–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
    elif dialog.cnt==5:
        dialog.user['goals']=update.message.text
        my_message = await send_text(update, context, 'ChatGPT is processing your request...')
        answer = await chatgpt.send_question(load_prompt('profile'), dialog_user_info_to_str(dialog.user))
        await my_message.edit_text(answer)

async def opener(update, context):
    dialog.mode='opener'
    dialog.cnt=0
    dialog.user.clear()
    await send_photo(update, context, "opener")
    await send_text(update, context, load_message("opener"))
    await send_text(update, context, "–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ—é –ø–∞—Å—Å–∏—é?")


async def opener_dialog(update, context):
    dialog.cnt+=1
    if dialog.cnt==1:
        dialog.user['name']=update.message.text
        await send_text(update, context, '–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?')
    elif dialog.cnt==2:
        dialog.user['age']=update.message.text
        await send_text(update, context, '–û—Ü–µ–Ω–∏ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å: –æ—Ç 0 –¥–æ 10 –±–∞–ª–ª–æ–≤')
    elif dialog.cnt==3:
        dialog.user['handsome']=update.message.text
        await send_text(update, context, '–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?')
    elif dialog.cnt==4:
        dialog.user['occupation']=update.message.text
        await send_text(update, context, '–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
    elif dialog.cnt==5:
        dialog.user['goals']=update.message.text
        my_message = await send_text(update, context, 'ChatGPT is processing your request...')
        answer = await chatgpt.send_question(load_prompt('opener'), dialog_user_info_to_str(dialog.user))
        await my_message.edit_text(answer)



async def date(update, context):
    dialog.mode='date'
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, load_message("date"), {  # –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
        "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",                
    })

async def date_dialog(update, context):
    text=update.message.text
    my_message=await send_text(update,context,'–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–µ—á–∞—Ç–∞–µ—Ç...')
    answer=await chatgpt.add_message(text)
    await my_message.edit_text(answer)

async def date_button(update, context):
    query = update.callback_query.data   #–∫–æ–¥ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.answer() #–ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    await send_photo(update, context, query)
    await send_text(update, context, '–ö—É—Ç–æ–π –≤—ã–±–æ—Ä!!!')
    chatgpt.set_prompt(load_prompt(query))

async def message(update, context):
    dialog.mode='message'
    dialog.list.clear()
    await send_photo(update, context, 'message')
    await send_text_buttons(update, context, load_message('message'),{
        'message_next':'–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'message_date':'–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ'
    })    

async def message_dialog(update, context):
    dialog.list.append(update.message.text)

async def message_button(update, context):
    query = update.callback_query.data   #–∫–æ–¥ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.answer() #–ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    prompt = load_prompt(query)
    msg_history = '\n\n'.join(dialog.list)
    my_message = await send_text(update, context, 'ChatGPT is processing your request...')
    answer = await chatgpt.send_question(prompt, msg_history)
    await my_message.edit_text(answer)

async def cat(update, context):
    API_CATS_URL = 'https://api.thecatapi.com/v1/images/search'
    my_msg = await send_text(update, context, '–ò—â—É –∫–æ—Ç–∏–∫–æ–≤...')
    cat_resp = requests.get(API_CATS_URL)
    if cat_resp.status_code == 200:
        cat_lnk = cat_resp.json()[0]['url']
        await my_msg.edit_text('–í–æ—Ç –≤–∞—à –∫–æ—Ç–∏–∫:')
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=cat_lnk)
    else:
        await my_msg.edit_text('–í—Å–µ –∫–æ—Ç–∏–∫–∏ —Ä–∞–∑–±–µ–∂–∞–ª–∏—Å—å :(')

dialog=Dialog()
dialog.mode=''
dialog.list=list()

chatgpt=ChatGptService(load_gpt_token())
tlg_token=load_telegram_token()
app = ApplicationBuilder().token(load_telegram_token()).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))
app.add_handler(CommandHandler("cat", cat))
app.add_handler(MessageHandler(filters.TEXT&~filters.COMMAND, hello))
app.add_handler(CallbackQueryHandler(date_button, pattern='^date_.*'))
app.add_handler(CallbackQueryHandler(message_button, pattern='^message_.*'))
app.add_handler(CallbackQueryHandler(hello_button))
app.run_polling()